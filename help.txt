django 기본설정
 - virtualenv django_venv
 - cd django_venv
 - cd scripts
 - activate
 - pip install django 
 
(Django2에서)
 - django-admin startproject fc_django 

(fc_django에서)
 - django-admin startapp user 

--------------------------------------------------------
models.py 설정

user models.py 수정 
 - class User() -> 사용자 
 - class Meta: -> admin에서 사용하기 편하기 위함

product models.py 수정
 - class Product() -> 사용자 
 - class Meta: -> admin에서 사용하기 편하기 위함

order models.py 수정 
 - class Order() -> 사용자 
 - class Meta: -> admin에서 사용하기 편하기 위함

실제 table 생성
 - settings.py의 APP에 user,product,order입력 
 - (/fc_django) python manage.py makemigrations 
 - (/fc_django) python manage.py migrate 

-------------------------------------------------------------------
admin 구성

user admin.py 수정 
 - class UserAdmin()

product admin.py 수정 
 - class ProductAdmin()

order admin.py 수정 
 - class OrderAdmin()

슈퍼 유저 만들기
 - (cd fc_django) python manage.py createsuperuser
 - python manage.py runserver에서 확인

--------------------------------------------------------------------
admin사이트에서 어떤 상품인지 사용자 인지 확인하는 방법

user,order,product models.py 수정
- def __str__(self)

----------------------------------------------------
기본 경로 지정 
user의 views.py 
 - def index(request)

user의 templates
 - base.html
 - index.html

index urls연결 - fc_django의 urls.py 
 - path()

-------------------------------------------------------------------
회원가입 view 만들기(form view)
 - user에서 forms.py를 만든다.
 - forms.py에서 class RegisterForm 제작

user의 views.py를 만들기
 - import FormView 
 - class RegisterView(FormView)

user에서 register.html만들기

fc_django의 urls.py에서 registerView를 지정해주기 

--------------------------------------------------------------------
로그인 view 만들기(form view)

user의 views.py 만들기
 - class LoginView(FromView)

user에서 login.html만들기

user에서 forms.py 만들기
 - class LoginForm() 
 - def form_valid() #로그인이 정상적일때 session에 저장

fc_django의 urls.py에서 LoginView를 지정해주기 
--------------------------------------------------------------
상품 목록 만들기(product app 부분)
product의 views.py 수정
 - class Product(ListView) 

product의 templates에서
 - product.html 만들기

fc_django의 urls.py에서 ProductList를 지정해주기 

-------------------------------------------------------
상품 등록 만들기(product app 부분)

product의 templates에서
 - register_product.html만들기

product의 forms.py 만들기
 - class RegisterForm() 작성 <-> models.py를 참고해서 작성

product의 views.py에서
 - class ProductCreate() 작성

fc_django의 urls.py에서 ProductCreate를 지정해주기 

꾸미기(editor)
1. semmornote 에서 easy to install
2. bootstap 4번 밑 2줄 
-> register_product.html의 {% block header %}~~~~~{% endblock %} 사이 부분

---------------------------------------------------------------

상품 상세보기(product app 부분)

product의 views.py에서
 - class ProductDetail() 

product의 templates에서
 - product_detail.html만들기

product의 product.html에서 
 - 상품명을 누르면 상세보기 가능하게 하기 

fc_django의 urls.py에서 ProductDetail를 지정해주기 -> 뒤에 번호라서 <int:pk> 사용

----------------------------------------------------------------------------------------

주문하기
product_detail.html에서 주문할 수 있게 만든다.

order의 forms.py에서 
 - order의 models.py를 참고해서 class RegisterForm()을 만든다

order의 views.py에서
 - class OrderCreate() 

product의 views.py에서
 - def get_context_data() 부분 session 사용하기 위함

fc_django의 urls.py에서 OrderCreate를 지정해주기 

-----------------------------------------------------
주문정보 조회하기
order의 views.py 에서
 - class OrderList()

order의 templates에서 
 - order.html 

fc_django의 urls.py에서 OrderList를 지정해주기 

------------------------------------------------------

Decorator -> page에 대해 권한 설정하기
- 함수를 wrapping해서 기능을 재사용 하게 하는 것

사용자 decorator 만들기
 - user에서 decorators.py 만들기
 - def login_required() - 로그인만 필요한 곳
 - def admin_required() - 관리자 권한이 필요한 곳

order의 views.py에서 
 - class OrderList()위의 @method_decorator(login_required or admin_required, name='dispatch')
 => wrapping 함수와 기존함수의 인자 값을 맞춰줘야 한다.
 => 로그인 or 관리자 권한이 필요한 곳에 다 넣어준다.

----------------------------------------------------------------
리팩토링 -> 유효성 부분과 모델 저장하는 부분(db) 분리

user transaction(db)
 - user의 forms.py 부분의 class RegisterForm()의 밑 회원가입 코드 삭제
 - user의 view.py 부분의 class RegisterView()의 def form_valid()(유효성 검사 끝날때 호출되는 함수) 작성

order transaction(db)
 - order의 forms.py 부분의 with transaction.atomic()부분 
 - order의 views.py 부분의 class OrderCreate()의 def form_valid()부분

product trasaction(db)
 - prodcut의 forms.py부분의 def clean()밑 부분을 
 - product의 views.py의 class ProductCreate()의 def form_valid()로 옮긴다. 